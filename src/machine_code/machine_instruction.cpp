#include "machine_instruction.hpp"

namespace machine_code {
std::string MachineInstruction::typeToString_[typesCount_] = {
    /**/ "undefined instruction",
    /*0*/ "move B to A",
    /*1*/ "move TH to A",
    /*2*/ "move TL to A",
    /*3*/ "move F to A",
    /*4*/ "move INT to A",
    /*5*/ "move A to B",
    /*6*/ "move TH to B",
    /*7*/ "move TL to B",
    /*8*/ "move F to B",
    /*9*/ "move INT to B",
    /*10*/ "move A to TH",
    /*11*/ "move B to TH",
    /*12*/ "move TL to TH",
    /*13*/ "move F to TH",
    /*14*/ "move INT to TH",
    /*15*/ "move A to TL",
    /*16*/ "move B to TL",
    /*17*/ "move TH to TL",
    /*18*/ "move F to TL",
    /*19*/ "move INT to TL",
    /*20*/ "move immediate to A",
    /*21*/ "move immediate to B",
    /*22*/ "move immediate to TH",
    /*23*/ "move immediate to TL",
    /*24*/ "move absolute to A",
    /*25*/ "move absolute zero page to A",
    /*26*/ "move absolute to B",
    /*27*/ "move absolute zero page to B",
    /*28*/ "move memory pointed by T to A",
    /*29*/ "move memory pointed by T to B",
    /*30*/ "move zero page memory pointed by B to A",
    /*31*/ "move zero page memory pointed by TH to A",
    /*32*/ "move zero page memory pointed by TL to A",
    /*33*/ "move zero page memory pointed by A to B",
    /*34*/ "move zero page memory pointed by TH to B",
    /*35*/ "move zero page memory pointed by TL to B",
    /*36*/ "move zero page memory pointed by A to TH",
    /*37*/ "move zero page memory pointed by B to TH",
    /*38*/ "move zero page memory pointed by TL to TH",
    /*39*/ "move zero page memory pointed by A to TL",
    /*40*/ "move zero page memory pointed by B to TL",
    /*41*/ "move zero page memory pointed by TH to TL",
    /*42*/ "move A to absolute memory",
    /*43*/ "move A to absolute zero page memory",
    /*44*/ "move B to absolute memory",
    /*45*/ "move B to absolute zero page memory",
    /*46*/ "move INT to absolute memory",
    /*47*/ "move INT to absolute zero page memory",
    /*48*/ "move immediate to absolute memory",
    /*49*/ "move immediate to absolute zero page memory",
    /*50*/ "move A to memory pointed by T",
    /*51*/ "move B to memory pointed by T",
    /*52*/ "move INT to memory pointed by T",
    /*53*/ "move B to zero page memory pointed by A",
    /*54*/ "move TH to zero page memory pointed by A",
    /*55*/ "move TL to zero page memory pointed by A",
    /*56*/ "move A to zero page memory pointed by B",
    /*57*/ "move TH to zero page memory pointed by B",
    /*58*/ "move TL to zero page memory pointed by B",
    /*59*/ "move A to zero page memory pointed by TH",
    /*60*/ "move B to zero page memory pointed by TH",
    /*61*/ "move TL to zero page memory pointed by TH",
    /*62*/ "move A to zero page memory pointed by TL",
    /*63*/ "move B to zero page memory pointed by TL",
    /*64*/ "move TH to zero page memory pointed by TL",
    /*65*/ "move immediate to memory pointed by T",
    /*66*/ "move immediate to zero page memory pointed by A",
    /*67*/ "move immediate to zero page memory pointed by B",
    /*68*/ "move immediate to zero page memory pointed by TH",
    /*69*/ "move immediate to zero page memory pointed by TL",
    /*70*/ "move -A to A",
    /*71*/ "move -B to A",
    /*72*/ "move -A to B",
    /*73*/ "move -B to B",
    /*74*/ "move -A to absolute memory",
    /*75*/ "move -B to absolute memory",
    /*76*/ "move -A to absolute zero page memory",
    /*77*/ "move -B to absolute zero page memory",
    /*78*/ "move -A to stack",
    /*79*/ "move -B to stack",
    /*80*/ "move A+B to A",
    /*81*/ "move A+B to B",
    /*82*/ "move A+B to absolute memory",
    /*83*/ "move A+B to absolute zero page memory",
    /*84*/ "move A+B to stack",
    /*85*/ "move A-B to A",
    /*86*/ "move B-A to A",
    /*87*/ "move A-B to B",
    /*88*/ "move B-A to B",
    /*89*/ "move A-B to absolute memory",
    /*90*/ "move B-A to absolute memory",
    /*91*/ "move A-B to absolute zero page memory",
    /*92*/ "move B-A to absolute zero page memory",
    /*93*/ "move A-B to stack",
    /*94*/ "move B-A to stack",
    /*95*/ "move A/2 to A",
    /*96*/ "move B/2 to A",
    /*97*/ "move A/2 to B",
    /*98*/ "move B/2 to B",
    /*99*/ "move A/2 to absolute memory",
    /*100*/ "move B/2 to absolute memory",
    /*101*/ "move A/2 to absolute zero page memory",
    /*102*/ "move B/2 to absolute zero page memory",
    /*103*/ "move A/2 to stack",
    /*104*/ "move B/2 to stack",
    /*105*/ "move ~A to A",
    /*106*/ "move ~B to A",
    /*107*/ "move ~A to B",
    /*108*/ "move ~B to B",
    /*109*/ "move ~A to absolute memory",
    /*110*/ "move ~B to absolute memory",
    /*111*/ "move ~A to absolute zero page memory",
    /*112*/ "move ~B to absolute zero page memory",
    /*113*/ "move ~A to stack",
    /*114*/ "move ~B to stack",
    /*115*/ "move A|B to A",
    /*116*/ "move A|B to B",
    /*117*/ "move A|B to absolute memory",
    /*118*/ "move A|B to absolute zero page memory",
    /*119*/ "move A|B to stack",
    /*120*/ "move A&B to A",
    /*121*/ "move A&B to B",
    /*122*/ "move A&B to absolute memory",
    /*123*/ "move A&B to absolute zero page memory",
    /*124*/ "move A&B to stack",
    /*125*/ "move A^B to A",
    /*126*/ "move A^B to B",
    /*127*/ "move A^B to absolute memory",
    /*128*/ "move A^B to absolute zero page memory",
    /*129*/ "move A^B to stack",
    /*130*/ "move A>>1 to A",
    /*131*/ "move B>>1 to A",
    /*132*/ "move A>>1 to B",
    /*133*/ "move B>>1 to B",
    /*134*/ "move A>>1 to absolute memory",
    /*135*/ "move B>>1 to absolute memory",
    /*136*/ "move A>>1 to absolute zero page memory",
    /*137*/ "move B>>1 to absolute zero page memory",
    /*138*/ "move A>>1 to stack",
    /*139*/ "move B>>1 to stack",
    /*140*/ "move A<<1 to A",
    /*141*/ "move B<<1 to A",
    /*142*/ "move A<<1 to B",
    /*143*/ "move B<<1 to B",
    /*144*/ "move A<<1 to absolute memory",
    /*145*/ "move B<<1 to absolute memory",
    /*146*/ "move A<<1 to absolute zero page memory",
    /*147*/ "move B<<1 to absolute zero page memory",
    /*148*/ "move A<<1 to stack",
    /*149*/ "move B<<1 to stack",
    /*150*/ "save flags of A-B",
    /*151*/ "save flags of B-A",
    /*152*/ "save flags of TH-TL",
    /*153*/ "save flags of TL-TH",
    /*154*/ "save flags of TH-A",
    /*155*/ "save flags of A-TH",
    /*156*/ "save flags of TH-B",
    /*157*/ "save flags of B-TH",
    /*158*/ "save flags of TL-A",
    /*159*/ "save flags of A-TL",
    /*160*/ "save flags of TL-B",
    /*161*/ "save flags of B-TL",
    /*162*/ "save flags of INT-A",
    /*163*/ "save flags of A-INT",
    /*164*/ "save flags of INT-B",
    /*165*/ "save flags of B-INT",
    /*166*/ "move 0 to A",
    /*167*/ "move 0 to B",
    /*168*/ "move 0 to TH",
    /*169*/ "move 0 to TL",
    /*170*/ "move 0 to T",
    /*171*/ "move A+1 to A",
    /*172*/ "move B+1 to B",
    /*173*/ "move T+1 to T",
    /*174*/ "move A-1 to A",
    /*175*/ "move B-1 to B",
    /*176*/ "move T-1 to T",
    /*177*/ "jump to immediate",
    /*178*/ "jump to immediate if sign flag set",
    /*179*/ "jump to immediate if sign flag not set",
    /*180*/ "jump to immediate pointed by T if sign flag set",
    /*181*/ "jump to immediate pointed by T if sign flag not set",
    /*182*/ "jump to immediate if parity flag set",
    /*183*/ "jump to immediate if parity flag not set",
    /*184*/ "jump to immediate pointed by T if parity flag set",
    /*185*/ "jump to immediate pointed by T if parity flag not set",
    /*186*/ "jump to immediate if zero flag set",
    /*187*/ "jump to immediate if zero flag not set",
    /*188*/ "jump to immediate pointed by T if zero flag set",
    /*189*/ "jump to immediate pointed by T if zero flag not set",
    /*190*/ "jump to immediate if carry flag set",
    /*191*/ "jump to immediate if carry flag not set",
    /*192*/ "jump to immediate pointed by T if carry flag set",
    /*193*/ "jump to immediate pointed by T if carry flag not set",
    /*194*/ "jump to immediate if overflow flag set",
    /*195*/ "jump to immediate if overflow flag not set",
    /*196*/ "jump to immediate pointed by T if overflow flag set",
    /*197*/ "jump to immediate pointed by T if overflow flag not set",
    /*198*/ "jump relative",
    /*199*/ "jump relative if sign flag set",
    /*200*/ "jump relative if sign flag not set",
    /*201*/ "jump relative from TL if sign flag set",
    /*202*/ "jump relative from TL if sign flag not set",
    /*203*/ "jump relative if parity flag set",
    /*204*/ "jump relative if parity flag not set",
    /*205*/ "jump relative from TL if parity flag set",
    /*206*/ "jump relative from TL if parity flag not set",
    /*207*/ "jump relative if zero flag set",
    /*208*/ "jump relative if zero flag not set",
    /*209*/ "jump relative from TL if zero flag set",
    /*210*/ "jump relative from TL if zero flag not set",
    /*211*/ "jump relative if carry flag set",
    /*212*/ "jump relative if carry flag not set",
    /*213*/ "jump relative from TL if carry flag set",
    /*214*/ "jump relative from TL if carry flag not set",
    /*215*/ "jump relative if overflow flag set",
    /*216*/ "jump relative if overflow flag not set",
    /*217*/ "jump relative from TL if overflow flag set",
    /*218*/ "jump relative from TL if overflow flag not set",
    /*219*/ "push PC to stack and jump to immediate",
    /*220*/ "pop PC from stack and jump to it",
    /*221*/ "push A to stack",
    /*222*/ "push B to stack",
    /*223*/ "push TH to stack",
    /*224*/ "push TL to stack",
    /*225*/ "push F to stack",
    /*226*/ "push INT to stack",
    /*227*/ "push T to stack",
    /*228*/ "push immediate to stack",
    /*229*/ "push absolute to stack",
    /*230*/ "push absolute zero page to stack",
    /*231*/ "pop to A from stack",
    /*232*/ "pop to B from stack",
    /*233*/ "pop to TH from stack",
    /*234*/ "pop to TL from stack",
    /*235*/ "pop to T from stack",
    /*236*/ "pop to memory from stack",
    /*237*/ "pop to zero page memory from stack",
    /*238*/ "do nothing",
    /*239*/ "skip",
    /*240*/ "skip next 1 instruction",
    /*241*/ "skip next 2 instructions",
    /*242*/ "enter interrupt service routine",
    /*243*/ "return from interrupt service routine",
    /*244*/ "trigger interrupt 0",
    /*245*/ "trigger interrupt 1",
    /*246*/ "trigger interrupt 2",
    /*247*/ "trigger interrupt 3",
    /*248*/ "trigger interrupt 4",
    /*249*/ "halt",
    /*250*/ "label"};

std::string MachineInstruction::typeToAssembly_[typesCount_] = {
    /**/ "Undefined Instruction",
    /*0*/ "0b00000001",
    /*1*/ "0b00000010",
    /*2*/ "0b00000011",
    /*3*/ "0b00000100",
    /*4*/ "0b00000101",
    /*5*/ "0b00000110",
    /*6*/ "0b00000111",
    /*7*/ "0b00001000",
    /*8*/ "0b00001001",
    /*9*/ "0b00001010",
    /*10*/ "0b00001011",
    /*11*/ "0b00001100",
    /*12*/ "0b00001101",
    /*13*/ "0b00001110",
    /*14*/ "0b00001111",
    /*15*/ "0b00010000",
    /*16*/ "0b00010001",
    /*17*/ "0b00010010",
    /*18*/ "0b00010011",
    /*19*/ "0b00010100",
    /*20*/ "0b00010101",
    /*21*/ "0b00010110",
    /*22*/ "0b00010111",
    /*23*/ "0b00011000",
    /*24*/ "0b00011001",
    /*25*/ "0b00011010",
    /*26*/ "0b00011011",
    /*27*/ "0b00011100",
    /*28*/ "0b00011101",
    /*29*/ "0b00011110",
    /*30*/ "0b00011111",
    /*31*/ "0b00100000",
    /*32*/ "0b00100001",
    /*33*/ "0b00100010",
    /*34*/ "0b00100011",
    /*35*/ "0b00100100",
    /*36*/ "0b00100101",
    /*37*/ "0b00100110",
    /*38*/ "0b00100111",
    /*39*/ "0b00101000",
    /*40*/ "0b00101001",
    /*41*/ "0b00101010",
    /*42*/ "0b00101011",
    /*43*/ "0b00101100",
    /*44*/ "0b00101101",
    /*45*/ "0b00101110",
    /*46*/ "0b00101111",
    /*47*/ "0b00110000",
    /*48*/ "0b00110001",
    /*49*/ "0b00110010",
    /*50*/ "0b00110011",
    /*51*/ "0b00110100",
    /*52*/ "0b00110101",
    /*53*/ "0b00110110",
    /*54*/ "0b00110111",
    /*55*/ "0b00111000",
    /*56*/ "0b00111001",
    /*57*/ "0b00111010",
    /*58*/ "0b00111011",
    /*59*/ "0b00111100",
    /*60*/ "0b00111101",
    /*61*/ "0b00111110",
    /*62*/ "0b00111111",
    /*63*/ "0b01000000",
    /*64*/ "0b01000001",
    /*65*/ "0b01000010",
    /*66*/ "0b01000011",
    /*67*/ "0b01000100",
    /*68*/ "0b01000101",
    /*69*/ "0b01000110",
    /*70*/ "0b01000111",
    /*71*/ "0b01001000",
    /*72*/ "0b01001001",
    /*73*/ "0b01001010",
    /*74*/ "0b01001011",
    /*75*/ "0b01001100",
    /*76*/ "0b01001101",
    /*77*/ "0b01001110",
    /*78*/ "0b01001111",
    /*79*/ "0b01010000",
    /*80*/ "0b01010001",
    /*81*/ "0b01010010",
    /*82*/ "0b01010011",
    /*83*/ "0b01010100",
    /*84*/ "0b01010101",
    /*85*/ "0b01010110",
    /*86*/ "0b01010111",
    /*87*/ "0b01011000",
    /*88*/ "0b01011001",
    /*89*/ "0b01011010",
    /*90*/ "0b01011011",
    /*91*/ "0b01011100",
    /*92*/ "0b01011101",
    /*93*/ "0b01011110",
    /*94*/ "0b01011111",
    /*95*/ "0b01100000",
    /*96*/ "0b01100001",
    /*97*/ "0b01100010",
    /*98*/ "0b01100011",
    /*99*/ "0b01100100",
    /*100*/ "0b01100101",
    /*101*/ "0b01100110",
    /*102*/ "0b01100111",
    /*103*/ "0b01101000",
    /*104*/ "0b01101001",
    /*105*/ "0b01101010",
    /*106*/ "0b01101011",
    /*107*/ "0b01101100",
    /*108*/ "0b01101101",
    /*109*/ "0b01101110",
    /*110*/ "0b01101111",
    /*111*/ "0b01110000",
    /*112*/ "0b01110001",
    /*113*/ "0b01110010",
    /*114*/ "0b01110011",
    /*115*/ "0b01110100",
    /*116*/ "0b01110101",
    /*117*/ "0b01110110",
    /*118*/ "0b01110111",
    /*119*/ "0b01111000",
    /*120*/ "0b01111001",
    /*121*/ "0b01111010",
    /*122*/ "0b01111011",
    /*123*/ "0b01111100",
    /*124*/ "0b01111101",
    /*125*/ "0b01111110",
    /*126*/ "0b01111111",
    /*127*/ "0b10000000",
    /*128*/ "0b10000001",
    /*129*/ "0b10000010",
    /*130*/ "0b10000011",
    /*131*/ "0b10000100",
    /*132*/ "0b10000101",
    /*133*/ "0b10000110",
    /*134*/ "0b10000111",
    /*135*/ "0b10001000",
    /*136*/ "0b10001001",
    /*137*/ "0b10001010",
    /*138*/ "0b10001011",
    /*139*/ "0b10001100",
    /*140*/ "0b10001101",
    /*141*/ "0b10001110",
    /*142*/ "0b10001111",
    /*143*/ "0b10010000",
    /*144*/ "0b10010001",
    /*145*/ "0b10010010",
    /*146*/ "0b10010011",
    /*147*/ "0b10010100",
    /*148*/ "0b10010101",
    /*149*/ "0b10010110",
    /*150*/ "0b10010111",
    /*151*/ "0b10011000",
    /*152*/ "0b10011001",
    /*153*/ "0b10011010",
    /*154*/ "0b10011011",
    /*155*/ "0b10011100",
    /*156*/ "0b10011101",
    /*157*/ "0b10011110",
    /*158*/ "0b10011111",
    /*159*/ "0b10100000",
    /*160*/ "0b10100001",
    /*161*/ "0b10100010",
    /*162*/ "0b10100011",
    /*163*/ "0b10100100",
    /*164*/ "0b10100101",
    /*165*/ "0b10100110",
    /*166*/ "0b10100111",
    /*167*/ "0b10101000",
    /*168*/ "0b10101001",
    /*169*/ "0b10101010",
    /*170*/ "0b10101011",
    /*171*/ "0b10101100",
    /*172*/ "0b10101101",
    /*173*/ "0b10101110",
    /*174*/ "0b10101111",
    /*175*/ "0b10110000",
    /*176*/ "0b10110001",
    /*177*/ "0b10110010",
    /*178*/ "0b10110011",
    /*179*/ "0b10110100",
    /*180*/ "0b10110101",
    /*181*/ "0b10110110",
    /*182*/ "0b10110111",
    /*183*/ "0b10111000",
    /*184*/ "0b10111001",
    /*185*/ "0b10111010",
    /*186*/ "0b10111011",
    /*187*/ "0b10111100",
    /*188*/ "0b10111101",
    /*189*/ "0b10111110",
    /*190*/ "0b10111111",
    /*191*/ "0b11000000",
    /*192*/ "0b11000001",
    /*193*/ "0b11000010",
    /*194*/ "0b11000011",
    /*195*/ "0b11000100",
    /*196*/ "0b11000101",
    /*197*/ "0b11000110",
    /*198*/ "0b11000111",
    /*199*/ "0b11001000",
    /*200*/ "0b11001001",
    /*201*/ "0b11001010",
    /*202*/ "0b11001011",
    /*203*/ "0b11001100",
    /*204*/ "0b11001101",
    /*205*/ "0b11001110",
    /*206*/ "0b11001111",
    /*207*/ "0b11010000",
    /*208*/ "0b11010001",
    /*209*/ "0b11010010",
    /*210*/ "0b11010011",
    /*211*/ "0b11010100",
    /*212*/ "0b11010101",
    /*213*/ "0b11010110",
    /*214*/ "0b11010111",
    /*215*/ "0b11011000",
    /*216*/ "0b11011001",
    /*217*/ "0b11011010",
    /*218*/ "0b11011011",
    /*219*/ "0b11011100",
    /*220*/ "0b11011101",
    /*221*/ "0b11011110",
    /*222*/ "0b11011111",
    /*223*/ "0b11100000",
    /*224*/ "0b11100001",
    /*225*/ "0b11100010",
    /*226*/ "0b11100011",
    /*227*/ "0b11100100",
    /*228*/ "0b11100101",
    /*229*/ "0b11100110",
    /*230*/ "0b11100111",
    /*231*/ "0b11101000",
    /*232*/ "0b11101001",
    /*233*/ "0b11101010",
    /*234*/ "0b11101011",
    /*235*/ "0b11101100",
    /*236*/ "0b11101101",
    /*237*/ "0b11101110",
    /*238*/ "0b11101111",
    /*239*/ "0b11110000",
    /*240*/ "0b11110001",
    /*241*/ "0b11110010",
    /*242*/ "0b11110011",
    /*243*/ "0b11110100",
    /*244*/ "0b11110101",
    /*245*/ "0b11110110",
    /*246*/ "0b11110111",
    /*247*/ "0b11111000",
    /*248*/ "0b11111001",
    /*249*/ "0b11111010",
    /*250*/ ""};
}  // namespace machine_code