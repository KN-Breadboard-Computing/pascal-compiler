ProgramNode Ifs:
  RoutineNode of type MAIN:
    RoutineHeadNode:
      Constants:
      Types:
      Variables:
        Group 0:
          BasicTypeNode INTEGER
          Identifiers:
            IdentifierNode: num
      Routines:
    RoutineBodyNode:
      CompoundStatementNode:
        BuiltinCallNode: WRITELN
          ArgumentsListNode:
            SpecialExpressionNode: CONST
              ConstantString<Enter an integer: >
        BuiltinCallNode: READ
          ArgumentsListNode:
            SpecialExpressionNode: VARIABLE
              IdentifierNode: num
        IfNode:
          Condition:
            MathExpressionNode: GREATER
              SpecialExpressionNode: VARIABLE
                IdentifierNode: num
              SpecialExpressionNode: CONST
                ConstantInteger<0>
          ThenStatement:
            BuiltinCallNode: WRITELN
              ArgumentsListNode:
                SpecialExpressionNode: CONST
                  ConstantString<The number is positive.>
        IfNode:
          Condition:
            MathExpressionNode: LESS
              SpecialExpressionNode: VARIABLE
                IdentifierNode: num
              SpecialExpressionNode: CONST
                ConstantInteger<0>
          ThenStatement:
            BuiltinCallNode: WRITELN
              ArgumentsListNode:
                SpecialExpressionNode: CONST
                  ConstantString<The number is negative.>
          ElseStatement:
            BuiltinCallNode: WRITELN
              ArgumentsListNode:
                SpecialExpressionNode: CONST
                  ConstantString<The number is zero or positive.>
        IfNode:
          Condition:
            MathExpressionNode: GREATER
              SpecialExpressionNode: VARIABLE
                IdentifierNode: num
              SpecialExpressionNode: CONST
                ConstantInteger<0>
          ThenStatement:
            BuiltinCallNode: WRITELN
              ArgumentsListNode:
                SpecialExpressionNode: CONST
                  ConstantString<The number is positive.>
          ElseStatement:
            IfNode:
              Condition:
                MathExpressionNode: LESS
                  SpecialExpressionNode: VARIABLE
                    IdentifierNode: num
                  SpecialExpressionNode: CONST
                    ConstantInteger<0>
              ThenStatement:
                BuiltinCallNode: WRITELN
                  ArgumentsListNode:
                    SpecialExpressionNode: CONST
                      ConstantString<The number is negative.>
              ElseStatement:
                BuiltinCallNode: WRITELN
                  ArgumentsListNode:
                    SpecialExpressionNode: CONST
                      ConstantString<The number is zero.>
        IfNode:
          Condition:
            MathExpressionNode: GREATER
              SpecialExpressionNode: VARIABLE
                IdentifierNode: num
              SpecialExpressionNode: CONST
                ConstantInteger<0>
          ThenStatement:
            CompoundStatementNode:
              BuiltinCallNode: WRITELN
                ArgumentsListNode:
                  SpecialExpressionNode: CONST
                    ConstantString<The number is positive.>
              IfNode:
                Condition:
                  MathExpressionNode: EQUAL
                    MathExpressionNode: MODULUS
                      SpecialExpressionNode: VARIABLE
                        IdentifierNode: num
                      SpecialExpressionNode: CONST
                        ConstantInteger<2>
                    SpecialExpressionNode: CONST
                      ConstantInteger<0>
                ThenStatement:
                  BuiltinCallNode: WRITELN
                    ArgumentsListNode:
                      SpecialExpressionNode: CONST
                        ConstantString<It is also an even number.>
                ElseStatement:
                  BuiltinCallNode: WRITELN
                    ArgumentsListNode:
                      SpecialExpressionNode: CONST
                        ConstantString<It is also an odd number.>
          ElseStatement:
            IfNode:
              Condition:
                MathExpressionNode: LESS
                  SpecialExpressionNode: VARIABLE
                    IdentifierNode: num
                  SpecialExpressionNode: CONST
                    ConstantInteger<0>
              ThenStatement:
                CompoundStatementNode:
                  BuiltinCallNode: WRITELN
                    ArgumentsListNode:
                      SpecialExpressionNode: CONST
                        ConstantString<The number is negative.>
                  IfNode:
                    Condition:
                      MathExpressionNode: EQUAL
                        MathExpressionNode: MODULUS
                          SpecialExpressionNode: VARIABLE
                            IdentifierNode: num
                          SpecialExpressionNode: CONST
                            ConstantInteger<2>
                        SpecialExpressionNode: CONST
                          ConstantInteger<0>
                    ThenStatement:
                      BuiltinCallNode: WRITELN
                        ArgumentsListNode:
                          SpecialExpressionNode: CONST
                            ConstantString<It is also an even number.>
                    ElseStatement:
                      BuiltinCallNode: WRITELN
                        ArgumentsListNode:
                          SpecialExpressionNode: CONST
                            ConstantString<It is also an odd number.>
              ElseStatement:
                BuiltinCallNode: WRITELN
                  ArgumentsListNode:
                    SpecialExpressionNode: CONST
                      ConstantString<The number is zero.>
        BuiltinCallNode: WRITELN
          Arguments: nullptr
